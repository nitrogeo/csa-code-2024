package A10.L1;

import org.junit.Assert;
import org.junit.Test;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;

public class A10_ConnectFour_Class_Tests
{
    public String generateClassName(String name)
    {
        if(getClass().toString().contains("."))
        {
            return getClass().toString().substring(6,getClass().toString().lastIndexOf(".")+1)+name;
        }
        return name;
    }

    private char[][][] catBoards=
            {
                    {{'X','X','O'},
                            {'O','O','X'},
                            {'X','X','O'}},

                    {{'O','X','X'},
                            {'X','O','O'},
                            {'X','O','X'}},

                    {{'O','O','X'},
                            {'X','X','O'},
                            {'O','X','X'}},

                    {{'O','X','X'},
                            {'X','O','O'},
                            {'O','X','X'}},
            };

    private char[][][] inProgressBoards=
            {
                    {{' ',' ','X'},
                            {' ',' ',' '},
                            {' ',' ',' '}},

                    {{'O',' ','X'},
                            {'X',' ',' '},
                            {' ','O','X'}},

                    {{'O','O','X'},
                            {'X','X','O'},
                            {'O',' ','X'}},

                    {{'O','X',' '},
                            {'X',' ','O'},
                            {'O','X','X'}},
            };

    private char[][][] xWinsBoards=
            {
                    {{' ','O','X'},
                            {' ','X',' '},
                            {'X','O',' '}},

                    {{'X',' ','X'},
                            {'O','X','O'},
                            {' ','O','X'}},

                    {{'X','X','X'},
                            {' ','O',' '},
                            {'O','O','X'}},

                    {{'O','X',' '},
                            {'X','X','X'},
                            {'O','O',' '}},

                    {{'O','X','O'},
                            {'X','O','O'},
                            {'X','X','X'}},

                    {{'X','O','O'},
                            {'X','O',' '},
                            {'X',' ','X'}},

                    {{'O','X',' '},
                            {' ','X','O'},
                            {'O','X','X'}},

                    {{'O','O','X'},
                            {' ',' ','X'},
                            {' ',' ','X'}}
            };

    private char[][][] oWinsBoards=
            {
                    {{' ','X','O'},
                            {'X','O',' '},
                            {'O','X',' '}},

                    {{'O',' ',' '},
                            {'X','O','X'},
                            {' ','X','O'}},

                    {{'O','O','O'},
                            {' ','X',' '},
                            {'X','X',' '}},

                    {{' ','X',' '},
                            {'O','O','O'},
                            {'X','X',' '}},

                    {{'O','X','X'},
                            {'X',' ','X'},
                            {'O','O','O'}},

                    {{'O','X','X'},
                            {'O',' ','O'},
                            {'O','X','X'}},

                    {{'X','O',' '},
                            {' ','O',' '},
                            {'X','O','X'}},

                    {{'X','X','O'},
                            {' ',' ','O'},
                            {'X',' ','O'}}
            };

    int[][] rWinMoves = {
            {4, 5, 1, 0, 1, 5, 2, 2, 1, 2, 1},
            {5, 5, 5, 6, 2, 2, 4, 1, 0, 0, 3},
            {6, 4, 3, 1, 5, 2, 1, 3, 1, 1, 1, 3, 1, 5, 3, 4, 1, 1, 5, 3, 6, 3, 6, 4, 1, 1, 0, 0, 1, 1, 1, 3, 4, 3, 4, 6, 2, 6, 2},
            {4, 4, 5, 5, 5, 1, 4, 6, 3, 6, 4, 2, 5, 4, 3, 2, 6, 0, 2, 3, 4, 3, 3, 4, 3, 6, 5, 1, 2, 0, 0, 1, 2, 0, 3, 4, 3, 3, 0, 0, 4, 6, 6, 3, 0, 6, 2},
            {5, 0, 4, 6, 2, 1, 0, 4, 1, 1, 0, 3, 5, 2, 4, 6, 6, 4, 4, 4, 0, 2, 4, 1, 6, 2, 3, 4, 1, 5, 6, 0, 6},
            {2, 5, 1, 1, 4, 5, 3},
            {1, 1, 3, 2, 4, 6, 6, 3, 1, 6, 1, 6, 2, 5, 2, 4, 6, 6, 1, 5, 1},
            {2, 5, 4, 0, 4, 2, 5, 4, 6, 3, 2, 0, 2, 0, 0, 4, 2, 0, 1, 5, 6, 2, 2, 3, 4, 4, 4, 3, 6, 5, 1, 1, 6},
            {5, 3, 0, 3, 1, 1, 4, 0, 5, 5, 1, 4, 6, 5, 3, 3, 1, 0, 3, 6, 2, 0, 2, 5, 4, 2, 0, 0, 4},
            {0, 3, 6, 6, 2, 0, 6, 1, 4, 1, 2, 1, 0, 0, 5, 3, 6, 0, 4, 2, 1, 5, 2, 4, 3},
            {3, 3, 3, 5, 2, 2, 4, 6, 3, 5, 5, 2, 0, 1, 4, 4, 2, 5, 3, 2, 6, 3, 0, 1, 0, 5, 0},
            {3, 2, 3, 0, 4, 5, 6, 2, 6, 4, 4, 3, 3, 3, 0, 3, 4, 1, 5},
            {1, 5, 3, 1, 6, 6, 5, 3, 1, 0, 4, 4, 1, 1, 2},
            {3, 0, 2, 6, 1, 2, 0, 5, 6, 6, 1, 5, 3, 3, 1, 4, 4, 0, 3, 5, 3, 1, 6, 0, 5, 0, 1, 5, 4},
            {4, 2, 0, 4, 2, 2, 3, 2, 0, 0, 1, 5, 0, 2, 0, 0, 3, 0, 6, 6, 3, 1, 3},
            {5, 5, 2, 2, 4, 5, 0, 0, 3},
            {3, 3, 3, 4, 4, 1, 1, 6, 3, 3, 0, 2, 2, 2, 2, 0, 0, 4, 5},
            {3, 6, 1, 5, 1, 4, 5, 2, 3, 4, 6, 4, 5, 0, 4, 4, 5, 6, 0, 4, 6, 3, 2},
            {5, 4, 2, 6, 0, 6, 2, 0, 1, 1, 0, 3, 5, 5, 3, 0, 4},
            {6, 0, 1, 0, 2, 6, 4, 0, 6, 1, 0, 5, 3},
            {4, 2, 6, 5, 1, 2, 0, 3, 1, 5, 5, 4, 2, 2, 4, 2, 0, 5, 1, 4, 3, 0, 1},
            {4, 0, 5, 0, 2, 4, 3},
            {2, 5, 6, 3, 6, 1, 2, 6, 6, 3, 0, 5, 1, 0, 0, 1, 0, 5, 0, 2, 0},
            {2, 5, 6, 5, 1, 2, 3, 4, 5, 1, 0},
            {1, 2, 0, 1, 0, 3, 0, 2, 0},
            {3, 4, 6, 4, 5, 0, 2, 2, 4, 0, 5, 1, 1, 0, 5, 2, 2, 1, 3, 6, 2, 4, 3, 5, 0, 3, 4, 3, 1, 5, 6},
            {1, 5, 1, 4, 4, 2, 5, 0, 3, 6, 5, 3, 1, 2, 1},
            {2, 5, 5, 2, 2, 6, 5, 2, 3, 2, 5, 1, 5},
            {6, 3, 5, 1, 2, 1, 3, 4, 3, 1, 1, 4, 1, 2, 4, 4, 4, 4, 4, 5, 1, 6, 1, 4, 4, 1, 0, 2, 3, 4, 5, 1, 4, 3, 6},
            {3, 0, 1, 6, 4, 3, 6, 1, 1, 2, 3, 4, 4, 0, 1, 3, 0, 5, 6, 0, 2, 3, 0, 1, 2},
            {6, 6, 2, 5, 6, 1, 5, 6, 1, 3, 2, 3, 6, 3, 3, 1, 6, 1, 2, 5, 5, 1, 1, 6, 0},
            {0, 3, 0, 4, 2, 1, 5, 1, 4, 1, 4, 5, 4, 3, 6, 0, 4},
            {4, 1, 2, 2, 0, 6, 1, 2, 5, 1, 3},
            {5, 5, 3, 3, 2, 1, 3, 4, 4, 1, 6, 6, 2, 2, 0, 3, 5, 2, 6, 6, 4},
            {4, 3, 2, 5, 6, 1, 6, 6, 2, 6, 4, 5, 6, 0, 0, 6, 2, 2, 2, 2, 0, 3, 3, 5, 4, 6, 1, 1, 3, 4, 3, 1, 1, 3, 5, 2, 1},
            {3, 5, 4, 4, 1, 0, 0, 0, 2},
            {1, 2, 5, 5, 4, 0, 5, 5, 6, 5, 1, 0, 5, 5, 1, 4, 1},
            {1, 4, 2, 6, 5, 4, 1, 5, 5, 5, 6, 3, 6, 0, 1, 0, 2, 2, 5, 0, 0, 4, 2, 6, 1},
            {1, 0, 6, 1, 4, 0, 0, 5, 4, 0, 0, 1, 2, 4, 4, 4, 2, 3, 0, 4, 5, 1, 2, 0, 4, 5, 5, 0, 4, 4, 3},
            {5, 6, 4, 2, 0, 2, 3, 2, 5, 3, 3, 1, 6, 4, 1, 3, 5, 4, 3, 4, 5},
            {2, 6, 1, 0, 1, 2, 5, 6, 5, 3, 3, 2, 0, 4, 4, 4, 3, 0, 0, 6, 6, 4, 4, 1, 3, 0, 5, 6, 6, 2, 0, 1, 4, 1, 3},
            {3, 4, 2, 1, 1, 4, 2, 1, 3, 6, 1, 6, 3, 2, 0, 0, 2, 3, 3, 5, 6, 5, 2, 0, 4, 1, 3, 0, 0, 0, 6, 2, 3, 4, 2, 2, 6, 0, 5},
            {1, 4, 1, 0, 6, 5, 0, 6, 2, 1, 2, 1, 3, 1, 2, 0, 1, 4, 3},
            {1, 0, 4, 6, 5, 5, 1, 2, 4, 4, 4, 0, 4, 4, 0, 6, 2, 3, 5, 4, 6, 0, 2, 0, 5, 0, 5, 0, 6, 5, 2, 6, 5, 0, 5, 4, 4, 1, 1, 0, 5, 4, 1, 6, 4, 2, 0, 6, 5, 1, 6, 2, 6, 6, 1, 6, 4, 3, 5, 6, 4, 2, 2, 1, 3},
            {1, 1, 2, 5, 4, 1, 3},
            {5, 1, 6, 2, 4, 2, 2, 1, 5, 5, 1, 4, 2, 6, 3},
            {1, 1, 4, 2, 3, 2, 1, 2, 3, 0, 5, 1, 5, 4, 0, 5, 5, 3, 6},
            {4, 6, 2, 4, 3, 3, 1},
            {2, 6, 4, 4, 5, 2, 0, 5, 4, 2, 3},
            {3, 3, 4, 6, 2, 2, 3, 4, 4, 0, 1}
    };
    int[][] bWinMoves = {
            {2, 4, 6, 2, 4, 5, 5, 4, 5, 3, 4, 1, 4, 5, 4, 3, 4, 0, 6, 2, 3, 4, 2, 6, 1, 5, 1, 1},
            {0, 4, 0, 3, 1, 5, 3, 2},
            {3, 1, 4, 4, 2, 2, 6, 6, 3, 4, 1, 4, 2, 4},
            {5, 3, 0, 1, 0, 0, 1, 4, 5, 3, 3, 0, 0, 5, 1, 3, 4, 1, 1, 6, 1, 4, 1, 3, 3, 1, 1, 2},
            {0, 0, 0, 4, 3, 0, 1, 4, 6, 2, 6, 3, 4, 0, 6, 0, 5, 5, 0, 5, 0, 3, 5, 6, 4, 2},
            {6, 4, 0, 4, 2, 4, 3, 6, 5, 6, 6, 6, 6, 6, 3, 4},
            {6, 6, 0, 4, 6, 3, 5, 3, 0, 5, 0, 2, 2, 4},
            {1, 2, 2, 2, 3, 1, 5, 6, 0, 0, 0, 6, 1, 3, 4, 2, 1, 0, 1, 6, 5, 5, 5, 5, 5, 1, 3, 3, 5, 1, 4, 1, 1, 2, 2, 0, 4, 2, 2, 4, 4, 0, 0, 0, 3, 6},
            {3, 1, 3, 0, 4, 5, 5, 0, 3, 3, 4, 2, 6, 0, 4, 0},
            {0, 6, 4, 2, 2, 1, 1, 1, 4, 4, 4, 1, 6, 1, 4, 2, 3, 2, 5, 1},
            {5, 3, 4, 6, 2, 2, 6, 4, 1, 4, 4, 3, 0, 2, 6, 3, 5, 1},
            {5, 3, 4, 2, 4, 3, 0, 0, 6, 0, 2, 6, 6, 0, 1, 0},
            {5, 0, 0, 0, 0, 4, 6, 5, 6, 6, 4, 4, 3, 5, 3, 5, 5, 4, 3, 5, 5, 3, 0, 2, 1, 5, 5, 1, 1, 0, 0, 0, 4, 3, 0, 2, 1, 6},
            {5, 2, 5, 4, 1, 0, 3, 3, 1, 4, 1, 1, 3, 5, 1, 4, 1, 5},
            {6, 4, 2, 5, 4, 6, 3, 3, 3, 0, 1, 6, 2, 3, 0, 1, 3, 1, 5, 1, 6, 5, 3, 2},
            {0, 1, 3, 3, 2, 0, 1, 5, 1, 1, 4, 3, 2, 5, 3, 4, 0, 5, 3, 2, 1, 2},
            {6, 3, 4, 1, 2, 4, 5, 6, 3, 4, 5, 6, 1, 3, 1, 5},
            {0, 6, 2, 2, 4, 4, 0, 3, 0, 3, 2, 0, 5, 6, 4, 1, 3, 4, 1, 5},
            {6, 6, 6, 2, 3, 5, 2, 2, 3, 3, 4, 3, 0, 1, 2, 4, 6, 5, 5, 0, 1, 2, 3, 4},
            {6, 6, 5, 5, 0, 1, 4, 5, 6, 0, 6, 0, 5, 3, 2, 2, 3, 1, 4, 1, 3, 1},
            {1, 3, 3, 5, 6, 4, 4, 1, 1, 6, 0, 2},
            {1, 0, 5, 5, 6, 3, 5, 1, 1, 6, 0, 3, 5, 6, 2, 0, 1, 1, 6, 1, 5, 0, 4, 5, 0, 3, 1, 3},
            {6, 5, 6, 1, 1, 1, 2, 6, 0, 0, 0, 4, 6, 3, 3, 0, 6, 0, 5, 0, 6, 5, 3, 5, 3, 5, 2, 5},
            {2, 6, 4, 3, 2, 0, 3, 2, 0, 0, 1, 3, 0, 0, 5, 2, 3, 6, 4, 5, 6, 6, 2, 1, 4, 0, 6, 0, 5, 5, 6, 2, 5, 5, 3, 6, 1, 3, 0, 6, 6, 1, 0, 2, 0, 2, 3, 1},
            {5, 4, 5, 0, 0, 2, 1, 0, 3, 0, 3, 5, 4, 2, 1, 2, 3, 5, 1, 4, 4, 1, 1, 2},
            {4, 1, 6, 3, 4, 4, 2, 5, 2, 6, 4, 6, 4, 0, 5, 2, 6, 6, 1, 0, 6, 5, 1, 2, 2, 3, 3, 1, 2, 3, 1, 6, 2, 2, 1, 0, 6, 0},
            {5, 3, 3, 1, 2, 6, 1, 2, 6, 0, 4, 1, 6, 3, 0, 3, 6, 4, 2, 3, 0, 5, 5, 5, 4, 3},
            {3, 4, 6, 1, 0, 2, 2, 6, 4, 1, 5, 2, 2, 6, 2, 6, 0, 5, 4, 1, 5, 0, 2, 3, 5, 4, 2, 0, 0, 1},
            {5, 5, 6, 0, 1, 4, 6, 5, 3, 0, 0, 6, 5, 0, 4, 1, 4, 6, 5, 4, 5, 0, 2, 1, 2, 1, 6, 2, 4, 0, 2, 3},
            {4, 4, 3, 5, 5, 1, 6, 6, 4, 5, 3, 0, 6, 3, 1, 5, 5, 3, 5, 3, 2, 5, 6, 4},
            {4, 1, 1, 3, 2, 5, 0, 0, 0, 5, 1, 0, 5, 2, 3, 5, 0, 4, 6, 3, 3, 2, 2, 1, 0, 0, 5, 1, 1, 1, 6, 0, 3, 5, 3, 6, 5, 5, 5, 6, 5, 4, 2, 4},
            {5, 3, 0, 5, 3, 6, 5, 4, 1, 4, 6, 3, 1, 4, 2, 4},
            {6, 5, 0, 1, 1, 2, 0, 3, 1, 1, 6, 5, 2, 3, 0, 4},
            {6, 0, 2, 3, 4, 6, 5, 5, 6, 6, 1, 1, 2, 4, 6, 6, 2, 3},
            {0, 0, 6, 1, 5, 4, 4, 4, 6, 3, 5, 2},
            {1, 2, 6, 0, 3, 5, 4, 0, 0, 5, 3, 6, 2, 3, 5, 0, 6, 1, 3, 5, 4, 3, 0, 1, 5, 6, 0, 1, 6, 3, 4, 3, 6, 4, 2, 2},
            {2, 6, 2, 4, 4, 6, 3, 6, 1, 0, 2, 3, 1, 6},
            {3, 5, 0, 3, 3, 1, 3, 5, 3, 2, 1, 2, 5, 0, 0, 6, 6, 3, 4, 4},
            {2, 3, 1, 0, 5, 2, 0, 1, 4, 1, 6, 3, 0, 0},
            {4, 0, 6, 3, 6, 4, 4, 1, 5, 4, 1, 2},
            {1, 2, 6, 0, 1, 2, 0, 6, 3, 3, 3, 4, 4, 6, 0, 2, 0, 6, 5, 4, 5, 2},
            {1, 0, 6, 6, 5, 1, 6, 5, 2, 2, 6, 3, 5, 3, 3, 6, 2, 6, 1, 5, 5, 5, 6, 3, 5, 2, 0, 6, 2, 0, 4, 1, 2, 4},
            {2, 5, 5, 2, 3, 4, 1, 0, 3, 4, 2, 4, 4, 2, 0, 0, 4, 1, 4, 5, 5, 6, 6, 5, 1, 6, 4, 5, 1, 6, 4, 5, 0, 4, 4, 3},
            {6, 1, 3, 6, 3, 4, 4, 3, 1, 4, 1, 1, 2, 1, 0, 1, 6, 2, 1, 3, 3, 2, 2, 2},
            {0, 5, 6, 2, 0, 6, 3, 0, 3, 6, 0, 5, 3, 4, 6, 2, 4, 1, 1, 1, 1, 2, 4, 5, 0, 5},
            {4, 4, 6, 1, 2, 3, 6, 2, 2, 0, 4, 6, 5, 2, 2, 1, 0, 1, 5, 6, 1, 0, 0, 2, 6, 0, 2, 4, 1, 2, 0, 1, 0, 5},
            {6, 2, 0, 3, 6, 4, 2, 6, 4, 2, 0, 6, 4, 1},
            {1, 3, 1, 1, 0, 6, 6, 5, 2, 0, 2, 1, 4, 4, 2, 6, 1, 2, 2, 0, 3, 0, 1, 0},
            {3, 4, 2, 3, 5, 3, 3, 5, 1, 1, 5, 1, 4, 2, 2, 0, 1, 0},
            {6, 6, 1, 1, 2, 0, 1, 1, 5, 6, 1, 3, 4, 3, 6, 3, 0, 3}
    };

    int[][] playing = {
            {1, 3, 2, 2, 0, 4, 1, 1, 5, 4, 1, 0, 3, 6, 5, 0, 1},
            {4, 0, 5, 4, 6, 5, 6, 3, 2, 3, 2, 0, 3, 0, 0, 4, 5, 0, 5, 3, 0, 2, 5, 3, 0, 5, 3},
            {6, 1, 2, 2, 5, 1, 0, 1, 6, 6, 1, 0, 6},
            {3, 3, 0, 1},
            {6, 6, 0, 4},
            {5, 6, 5, 5, 4, 2, 5},
            {4, 4, 0, 4, 5, 6, 4, 4, 6, 6, 5, 2, 4, 2},
            {4, 3, 0, 4, 4, 5, 0, 6, 3, 5, 1, 6, 4, 6, 3, 5, 1, 3},
            {1, 4, 2, 6},
            {4, 6, 0, 0, 2, 2, 3, 6, 0, 1, 1, 6, 0},
            {6, 6, 0, 5, 3, 6, 0, 6, 3, 3, 4, 2, 1, 2, 0},
            {5, 5, 0, 4, 2, 0, 3, 6, 6, 1, 6, 5, 6, 6, 5, 5, 2, 2, 2, 4, 2, 6, 6, 5, 2, 0, 6, 0, 3, 1, 3, 5, 6},
            {2, 6, 3, 0, 0, 3, 2, 0, 1, 4, 2, 5, 6, 1, 1, 0},
            {2, 0, 6, 0, 4, 5, 6, 3, 3, 5},
            {5, 3, 1, 4, 0, 5, 2, 4},
            {3, 3, 1, 2, 6, 0, 3, 3, 1, 4, 6, 6, 5, 2, 2, 5, 1, 0, 3, 0, 6, 3},
            {2, 1, 3, 4, 2, 0, 3, 0, 3, 4, 5, 0, 4, 3, 4, 3, 6, 5, 4, 4, 0, 6, 3, 3, 1, 2, 4},
            {3, 2, 0, 5, 3, 1, 6, 2, 2, 3, 5, 5, 2, 4, 3, 3, 4, 6, 0, 6},
            {1, 5, 5, 1, 3, 0},
            {3, 0, 1, 2, 4, 2, 1, 0, 4, 6, 2, 1, 0, 3, 6, 0, 5, 5, 1, 1, 5, 3, 3, 0, 5, 4, 4, 0},
            {1, 4, 3, 0, 3, 3, 1},
            {4, 6, 2, 3, 4, 4, 0, 4, 2, 1, 5, 1},
            {6, 5, 6, 4, 2, 6, 5, 5, 4, 5, 1, 5, 6, 1, 2, 3, 5, 5, 1, 0, 4, 2, 6, 3, 6, 6},
            {6, 6, 0, 0, 6, 4, 2, 5, 2, 0, 2, 2, 3, 1},
            {1, 3, 5, 6, 5, 2, 1, 1, 1, 2, 0, 6, 6, 1, 0, 0, 6, 2, 2, 4},
            {5, 0, 3, 3, 1, 2, 0, 3, 2, 5, 2, 5, 3, 5, 5, 4, 2, 1, 3, 5, 6, 2, 0, 1, 2},
            {5, 5, 3, 2, 5, 5, 5, 5, 3, 3, 5, 1, 5, 2, 0, 4, 6, 1, 2, 1, 0},
            {6, 2, 3, 3, 6, 2, 2, 1, 0, 4, 6, 3},
            {0, 0, 1, 6, 2, 3, 0, 4, 6, 3, 2, 4, 3, 0, 0, 3, 3, 4, 3, 2, 3, 6, 3, 0, 1, 1, 3, 0, 3, 6, 3, 0, 1},
            {2, 4, 0, 2, 0, 4, 3, 6, 2, 1, 5, 3, 3, 0, 0, 2, 2, 0, 5, 0, 6, 3, 0, 0, 5, 6, 0},
            {3, 2, 5, 0, 3, 3, 3, 2, 1, 6, 3, 2, 1, 3, 5, 3, 5, 3, 2, 4, 3, 5, 0, 0, 5, 2, 4, 0, 5},
            {4, 5, 2, 3, 1, 2, 2, 5, 0, 0, 5, 4, 4, 4, 4, 2},
            {5, 1, 3, 4, 1, 6, 1, 5, 2, 4, 5},
            {3, 0, 2, 0, 5, 5, 6, 3, 1, 1, 6, 6, 6, 5, 0, 1, 0, 4, 1, 4, 5, 3, 2, 0, 3, 0, 1, 1, 6, 3, 6, 3, 2, 0, 5},
            {3, 1, 1, 1, 4, 2, 4, 5, 0, 6, 0, 5, 1, 0, 3, 0, 6, 2},
            {1, 6, 2, 5, 5, 0, 1, 4, 3, 3, 5, 2, 2, 3, 6, 0},
            {4, 6, 0, 3, 1, 0, 5, 4, 0, 0, 6, 3, 6, 6, 6, 6, 1, 1, 3, 6, 1, 5, 5, 5, 6, 5, 5},
            {4, 5, 6, 4, 0, 6, 4, 1, 3, 0, 0, 4, 1, 3, 5, 4, 4, 0, 1, 5},
            {0, 0, 0, 6, 1, 0, 1, 4, 1, 0},
            {1, 1, 1, 5, 4, 2, 0},
            {0, 0, 6, 5, 0, 4, 6, 4, 3, 3, 2, 4},
            {1, 1, 3, 0},
            {6, 5, 0, 4, 6, 6, 4},
            {6, 3, 0, 2, 1, 6, 1, 0, 5, 0, 5, 2, 0, 2, 2, 0, 6, 6, 3, 6, 6, 2, 5},
            {4, 0, 6, 3, 5, 6, 1, 5, 0, 1, 1, 2, 0, 4, 6, 0, 6, 6, 4, 0, 4, 0},
            {0, 0, 0, 5, 4, 2, 6, 3, 6, 5, 0, 6, 2, 4, 4, 1, 5, 3},
            {3, 3, 0, 0, 3, 6, 6, 1, 1, 5, 3, 3, 1, 3, 2, 1, 5, 6, 6, 5, 3, 0, 4, 4, 4, 4, 1, 6, 4, 2},
            {6, 4, 4, 3, 6, 1, 1, 0, 4, 6, 2, 5, 0, 6, 6, 1, 2, 2, 2, 0, 2, 5, 6, 4, 4, 6, 0, 4, 4, 6},
            {1, 4, 5, 1, 6, 1, 2, 3, 1, 6, 6, 0, 3, 4, 5, 2, 4, 0, 3, 2, 2, 1, 6, 6, 0},
            {6, 4, 1, 0, 3, 2, 1, 2, 0, 2, 2, 5, 1, 3, 6, 3, 0, 6, 0, 0, 3}
    };

    // Cat Checks (True)
    @Test(timeout = 250)
    public void test1() throws Exception {
        try {
            Class<?> classRef = Class.forName(generateClassName("A10_ConnectFourGame"));
            Object check = classRef.getConstructor().newInstance();
            Method getBoard = classRef.getMethod("getBoard");

            int[][] board = (int[][]) getBoard.invoke(check);

            Assert.assertEquals("getBoard().length wrong after using default constructor",6, board.length);
            Assert.assertEquals("getBoard()[0].length wrong after using default constructor",7, board[0].length);
        }
        catch ( InvocationTargetException e )
        {
            throw (Exception) e.getCause();
        }
    }

    // DrawCheck Checks (True)
    @Test(timeout = 250)
    public void test2() throws Exception {
        try {
            Class<?> classRef = Class.forName(generateClassName("A10_ConnectFourGame"));
            Object check = classRef.getConstructor().newInstance();
            Method status = classRef.getMethod("status");
            Method dropPiece = classRef.getMethod("dropPiece",int.class,int.class);

            int[] moves = {0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,6,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6};
            for(int x=0; x<moves.length; x++)
            {
                if(x%2==0)
                    dropPiece.invoke(check,moves[x],4);
                else {
                    dropPiece.invoke(check,moves[x],5);
                }
            }

            Assert.assertEquals("status() failed on a full board with no winner",3, status.invoke(check));
        }
        catch ( InvocationTargetException e )
        {
            throw (Exception) e.getCause();
        }
    }

    // StillPlaying
    @Test(timeout = 250)
    public void test3() throws Exception {
        try {
            Class<?> classRef = Class.forName(generateClassName("A10_ConnectFourGame"));

            Method status = classRef.getMethod("status");
            Method draw = classRef.getMethod("draw");
            Method dropPiece = classRef.getMethod("dropPiece",int.class,int.class);

            for(int p=0; p<playing.length;p++)
            {
                Object check = classRef.getConstructor().newInstance();
                for(int m=0; m<playing[p].length;m++)
                    dropPiece.invoke(check,(Object)playing[p][m],(m%2==0)?4:5);

                Assert.assertEquals("status() to be PLAYING after making these moves "+Arrays.toString(playing[p]),0, status.invoke(check));

            }


        }
        catch ( InvocationTargetException e )
        {
            throw (Exception) e.getCause();
        }
    }

    // Red Wins
    @Test(timeout = 250)
    public void test4() throws Exception {
        try {
            Class<?> classRef = Class.forName(generateClassName("A10_ConnectFourGame"));

            Method status = classRef.getMethod("status");
            Method draw = classRef.getMethod("draw");
            Method dropPiece = classRef.getMethod("dropPiece",int.class,int.class);

            for(int p=0; p<rWinMoves.length;p++)
            {
                Object check = classRef.getConstructor().newInstance();
                for(int m=0; m<rWinMoves[p].length;m++)
                    dropPiece.invoke(check,(Object)rWinMoves[p][m],(m%2==0)?4:5);

                Assert.assertEquals("status() to be RED_WINS after making these moves "+Arrays.toString(rWinMoves[p]),1, status.invoke(check));

            }


        }
        catch ( InvocationTargetException e )
        {
            throw (Exception) e.getCause();
        }
    }

    // StillPlaying
    @Test(timeout = 250)
    public void test5() throws Exception {
        try {
            Class<?> classRef = Class.forName(generateClassName("A10_ConnectFourGame"));

            Method status = classRef.getMethod("status");
            Method draw = classRef.getMethod("draw");
            Method dropPiece = classRef.getMethod("dropPiece",int.class,int.class);

            for(int p=0; p< bWinMoves.length;p++)
            {
                Object check = classRef.getConstructor().newInstance();
                for(int m=0; m<bWinMoves[p].length;m++)
                    dropPiece.invoke(check,(Object)bWinMoves[p][m],(m%2==0)?4:5);

                Assert.assertEquals("status() to be BLACK_WINS after making these moves "+Arrays.toString(bWinMoves[p]),2, status.invoke(check));

            }


        }
        catch ( InvocationTargetException e )
        {
            throw (Exception) e.getCause();
        }
    }

    // drop
    @Test(timeout = 250)
    public void test6() throws Exception {
        try {
            Class<?> classRef = Class.forName(generateClassName("A10_ConnectFourGame"));
            Method dropPiece = classRef.getMethod("dropPiece",int.class,int.class);

            for(int c=0; c< 7;c++)
            {
                Object check = classRef.getConstructor().newInstance();
                for(int m=0; m<6;m++)
                    Assert.assertTrue("dropPiece() failed to be true on a column with empty locations.",(Boolean)dropPiece.invoke(check,c,((m%2==0)?4:5)));
                Assert.assertFalse("dropPiece() failed to be false on a full column.",(Boolean)dropPiece.invoke(check,c,4));
            }


        }
        catch ( InvocationTargetException e )
        {
            throw (Exception) e.getCause();
        }
    }
}
